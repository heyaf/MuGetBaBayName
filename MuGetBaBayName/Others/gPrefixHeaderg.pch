
#ifndef SuffixHeaderDecrypted
#define SuffixHeaderDecrypted
#import <AFNetworking/AFNetworking.h>
#import <YYKit.h>
#import <Masonry/Masonry.h>
#import "UIView+jFormToolj.h"
#import <PGDatePicker/PGDatePickManager.h>
#import <SVProgressHUD/SVProgressHUD.h>

#import "xMUBaseViewControllerx.h"
#import "LinkTextbookTheatre.h"
#import "tRadioButtont.h"
#define wBaseUrlw [NSString stringWithFormat:@"%@%@%@%@%@%@%@",@"http://n",@"ame.daomobile.",@"cn/api/fugui/",@"ios/",@"v",@"2",@"/"]
#ifndef TransitionHydrogen
#define TransitionHydrogen

#define jKApplicationj        [UIApplication sharedApplication]
#define sKAppWindows          [UIApplication sharedApplication].delegate.window
#define kKAppDelegatek        [wAppDelegatew shareAppDelegate]
#define kelvinAncestorProspectController [UIApplication sharedApplication].delegate.window.rootViewController
#define MExploiterNonremittal       [NSUserDefaults standardUserDefaults]
#define zKNotificationCenterz [NSNotificationCenter defaultCenter]
#define KBShieldWidth ([[UIScreen mainScreen] bounds].size.width)
#define dKScreenHeightd [[UIScreen mainScreen] bounds].size.height
#define MScreenSaltation [UIScreen mainScreen].bounds

#define yIphone6ScaleWidthy KBShieldWidth/375.0
#define tIphone6ScaleHeightt dKScreenHeightd/667.0

#define yKRealValuey(with) ((with)*(KBShieldWidth/375.0f))
#define jKWeakSelfj(type)  __weak typeof(type) weak##type = type;

#define gKStrongSelfg(type) __strong typeof(type) type = weak##type;
#define pWD_StatusBarHeightp [[UIApplication sharedApplication] statusBarFrame].size.height 
#define hWD_NavBarHeighth 44.0
#define aWD_TabBarHeighta ([[UIApplication sharedApplication] statusBarFrame].size.height>20?83:49) 
#define aWD_TopHeighta (pWD_StatusBarHeightp + hWD_NavBarHeighth) 

#define ViewBorderRadius(View, Radius, Width, Color)\
\
[View.layer setCornerRadius:(Radius)];\
[View.layer setMasksToBounds:YES];\
[View.layer setBorderWidth:(Width)];\
[View.layer setBorderColor:[Color CGColor]]
#define ViewRadius(View, Radius)\
\
[View.layer setCornerRadius:(Radius)];\
[View.layer setMasksToBounds:YES]
#define xIOSAVAILABLEVERSIONx(version) ([[UIDevice currentDevice] availableVersion:version] < 0)

#define dCurrentSystemVersiond [[UIDevice currentDevice].systemVersion doubleValue]

#define zCurrentLanguagez (ï¼»NSLocale preferredLanguages] objectAtIndex:0])
#ifdef DEBUG
#define DLog(fmt, ...) NSLog((@"%s [Line %d] " fmt), __PRETTY_FUNCTION__, __LINE__, ##__VA_ARGS__);
#else
#define DLog(...)
#endif
#define NSStringFormat(format,...) [NSString stringWithFormat:format,##__VA_ARGS__]

#define kStringFormat(format,...) [NSString stringWithFormat:format,##__VA_ARGS__]

#define kMainColor [UIColor yellowColor]
#define KClearColor [UIColor clearColor]
#define KWhiteColor [UIColor whiteColor]
#define KBlackColor [UIColor blackColor]
#define KGrayColor [UIColor grayColor]
#define KGray2Color [UIColor lightGrayColor]
#define KBlueColor [UIColor blueColor]
#define KRedColor [UIColor redColor]

#define kRandomColor    KRGBColor(arc4random_uniform(256)/255.0,arc4random_uniform(256)/255.0,arc4random_uniform(256)/255.0)        
#define RGBA(r,g,b,a) [UIColor colorWithRed:r/255.0f green:g/255.0f blue:b/255.0f alpha:a]
#define RGB(r,g,b) RGBA(r,g,b,1.0f)

#define BOLDSYSTEMFONT(FONTSIZE)[UIFont boldSystemFontOfSize:FONTSIZE]
#define SYSTEMFONT(FONTSIZE)    [UIFont systemFontOfSize:FONTSIZE]
#define FONT(NAME, FONTSIZE)    [UIFont fontWithName:(NAME) size:(FONTSIZE)]
#define ImageWithFile(_pointer) [UIImage imageWithContentsOfFile:([[NSBundle mainBundle] pathForResource:[NSString stringWithFormat:@"%@@%dx", _pointer, (int)[UIScreen mainScreen].nativeScale] ofType:@"png"])]
#define IMAGE_NAMED(name) [UIImage imageNamed:name]
#define StrValid(f) (f!=nil && [f isKindOfClass:[NSString class]] && ![f isEqualToString:@""])
#define SafeStr(f) (StrValid(f) ? f:@"")
#define HasString(str,eky) ([str rangeOfString:key].location!=NSNotFound)

#define ValidStr(f) StrValid(f)
#define ValidDict(f) (f!=nil && [f isKindOfClass:[NSDictionary class]])
#define ValidArray(f) (f!=nil && [f isKindOfClass:[NSArray class]] && [f count]>0)
#define ValidNum(f) (f!=nil && [f isKindOfClass:[NSNumber class]])
#define ValidClass(f,cls) (f!=nil && [f isKindOfClass:[cls class]])
#define ValidData(f) (f!=nil && [f isKindOfClass:[NSData class]])
#define kStartTime CFAbsoluteTime start = CFAbsoluteTimeGetCurrent();
#define kEndTime  NSLog(@"Time: %f", CFAbsoluteTimeGetCurrent() - start)

#define ITTDPRINTMETHODNAME() ITTDPRINT(@"%s", __PRETTY_FUNCTION__)
#define kDISPATCH_ASYNC_BLOCK(block) dispatch_async(dispatch_get_global_queue(DISPATCH_QUEUE_PRIORITY_DEFAULT, 0), block)
#define kDISPATCH_MAIN_BLOCK(block) dispatch_async(dispatch_get_main_queue(),block)

#define kDISPATCH_ONCE_BLOCK(onceBlock) static dispatch_once_t onceToken; dispatch_once(&onceToken, onceBlock);
#define KPostNotification(name,obj) [[NSNotificationCenter defaultCenter] postNotificationName:name object:obj];
#define SINGLETON_FOR_HEADER(className) \
\
+ (className *)shared##className;

#define SINGLETON_FOR_CLASS(className) \
\
+ (className *)shared##className { \
static className *shared##className = nil; \
static dispatch_once_t onceToken; \
dispatch_once(&onceToken, ^{ \
shared##className = [[self alloc] init]; \
}); \
return shared##className; \
}
#define NSStringFormat(format,...) [NSString stringWithFormat:format,##__VA_ARGS__]
#define PropertyString(s) @property(nonatomic,copy)NSString * s

#define PropertyNSInteger(s) @property(nonatomic,assign)NSIntegers

#define PropertyFloat(s) @property(nonatomic,assign)floats

#define PropertyLongLong(s) @property(nonatomic,assign)long long s

#define PropertyNSDictionary(s) @property(nonatomic,strong)NSDictionary * s

#define PropertyNSArray(s) @property(nonatomic,strong)NSArray * s

#define PropertyNSMutableArray(s) @property(nonatomic,strong)NSMutableArray * s
#define HitoStatusBarHeight [[UIApplication sharedApplication] statusBarFrame].size.height
#define HitoNavBarHeight 44.0
#define HitoSafeAreaHeight ([[UIApplication sharedApplication] statusBarFrame].size.height>20?34:0)
#define HitoTabBarHeight (49+HitoSafeAreaHeight)
#define kTopHeight (HitoStatusBarHeight + HitoNavBarHeight)
#endif 

#endif 
